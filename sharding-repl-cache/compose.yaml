services:
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.100
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"

  #сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  #запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--host", "configSrv", "--port", "27017", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард
  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.18
    volumes:
      - shard1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1_replSet", #название реплик
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--host", "shard1", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-я реплика 1-й шард
  shard1_repl1:
    image: mongo:latest
    container_name: shard1_repl1
    restart: always
    ports:
      - "27118:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.118
    volumes:
      - shard1-repl1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1_replSet", #название реплик
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--host", "shard1_repl1", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-я реплика 1-й шард
  shard1_repl2:
    image: mongo:latest
    container_name: shard1_repl2
    restart: always
    ports:
      - "27218:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.218
    volumes:
      - shard1-repl2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1_replSet", #название реплик
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--host", "shard1_repl2", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-й шард
  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.19
    volumes:
      - shard2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2_replSet", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--host", "shard2", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-я реплика 2-й шард
  shard2_repl1:
    image: mongo:latest
    container_name: shard2_repl1
    restart: always
    ports:
      - "27119:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.119
    volumes:
      - shard2-repl1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2_replSet", #название реплик
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--host", "shard2_repl1", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-я реплика 2-й шард
  shard2_repl2:
    image: mongo:latest
    container_name: shard2_repl2
    restart: always
    ports:
      - "27219:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.219
    volumes:
      - shard2-repl2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2_replSet", #название реплик
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--host", "shard2_repl2", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--host", "mongos_router", "--port", "27020", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #Кэш
  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      app-network:
        ipv4_address: 173.17.0.200
    volumes:
      - redis_data:/data
    command: [ "redis-server" ]

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  redis_data:
  shard1-data:
  shard1-repl1-data:
  shard1-repl2-data:
  shard2-data:
  shard2-repl1-data:
  shard2-repl2-data:
